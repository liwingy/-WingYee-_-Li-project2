{
    "sourceFile": "src/views/Game.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1731374456722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1731386662084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \n     // Check if the cell is a mine\n     if (newGrid[row][col].isMine) {\n       setIsGameOver(true);\n-      alert(\"Game over! You hit a bomb!\");\n+      alert(\"Game over! You hit a bomb!💣\");\n       revealAllMines(newGrid);\n       setGrid(newGrid);\n       return;\n     }\n@@ -91,9 +91,9 @@\n \n     // Check if the player has won\n     if (checkWin(newGrid)) {\n       setHasWon(true);\n-      alert(\"Congratulations! You won!\");\n+      alert(\"Congratulations! You won!🏅\");\n     }\n   }\n \n   // Right-click or shift-click to toggle a flag, implementing the Flag Bomb Function\n"
                },
                {
                    "date": 1731386707207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \n     // Check if the cell is a mine\n     if (newGrid[row][col].isMine) {\n       setIsGameOver(true);\n-      alert(\"Game over! You hit a bomb!💣\");\n+      alert(\"Game over🙈! You hit a bomb💣!\");\n       revealAllMines(newGrid);\n       setGrid(newGrid);\n       return;\n     }\n@@ -91,9 +91,9 @@\n \n     // Check if the player has won\n     if (checkWin(newGrid)) {\n       setHasWon(true);\n-      alert(\"Congratulations! You won!🏅\");\n+      alert(\"Congratulations! You won🏅!\");\n     }\n   }\n \n   // Right-click or shift-click to toggle a flag, implementing the Flag Bomb Function\n"
                },
                {
                    "date": 1731386733844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n \n     // Check if the player has won\n     if (checkWin(newGrid)) {\n       setHasWon(true);\n-      alert(\"Congratulations! You won🏅!\");\n+      alert(\"Congratulations🥳! You won🏅!\");\n     }\n   }\n \n   // Right-click or shift-click to toggle a flag, implementing the Flag Bomb Function\n"
                },
                {
                    "date": 1731387070403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n   // Render the Minesweeper game\n   return (\n     <div>\n       <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper\"}</h1>\n-      <h2>Flags remaining: {flagCount}</h2>\n+      <h2>🚩Flags remaining: {flagCount}</h2>\n       <button onClick={resetGame}>Reset</button>\n       <div className=\"board\" style={{ gridTemplateColumns: `repeat(${config.size}, 1fr)` }}>\n         {grid.map((row, rIndex) =>\n           row.map((cell, cIndex) => (\n"
                },
                {
                    "date": 1731387086584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n   // Render the Minesweeper game\n   return (\n     <div>\n       <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper\"}</h1>\n-      <h2>🚩Flags remaining: {flagCount}</h2>\n+      <h2>Flags remaining: {flagCount} 🚩</h2>\n       <button onClick={resetGame}>Reset</button>\n       <div className=\"board\" style={{ gridTemplateColumns: `repeat(${config.size}, 1fr)` }}>\n         {grid.map((row, rIndex) =>\n           row.map((cell, cIndex) => (\n"
                },
                {
                    "date": 1731387116365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n \n   // Render the Minesweeper game\n   return (\n     <div>\n-      <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper\"}</h1>\n+      <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper🏆\"}</h1>\n       <h2>Flags remaining: {flagCount} 🚩</h2>\n       <button onClick={resetGame}>Reset</button>\n       <div className=\"board\" style={{ gridTemplateColumns: `repeat(${config.size}, 1fr)` }}>\n         {grid.map((row, rIndex) =>\n"
                },
                {
                    "date": 1731387139373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n \n   // Render the Minesweeper game\n   return (\n     <div>\n-      <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper🏆\"}</h1>\n+      <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper\"}</h1>\n       <h2>Flags remaining: {flagCount} 🚩</h2>\n       <button onClick={resetGame}>Reset</button>\n       <div className=\"board\" style={{ gridTemplateColumns: `repeat(${config.size}, 1fr)` }}>\n         {grid.map((row, rIndex) =>\n"
                }
            ],
            "date": 1731374456722,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Cell from '../components/Cell';\n\nfunction Game() {\n  const { difficulty } = useParams();\n\n  // Define game states and configurations\n  const [grid, setGrid] = useState([]);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [hasWon, setHasWon] = useState(false);\n  const [isFirstClick, setIsFirstClick] = useState(true);\n  const [flagCount, setFlagCount] = useState(0);\n\n  // Configuration for different difficulties\n  const config = {\n    easy: { size: 8, mines: 10 },\n    medium: { size: 16, mines: 40 },\n    hard: { size: 30, mines: 99 },\n  }[difficulty] || { size: 8, mines: 10 };\n\n  // Reset the game when the component mounts or the difficulty changes\n  useEffect(() => {\n    resetGame(); // Initialize game state\n  }, [difficulty]);\n\n  // Initialize a new grid and set up mines\n  function initializeGrid() {\n    const emptyGrid = Array.from({ length: config.size }, () =>\n      Array.from({ length: config.size }, () => ({\n        isRevealed: false,\n        isMine: false,\n        isFlagged: false,\n        adjacentMines: 0,\n      }))\n    );\n    setGrid(emptyGrid); // Set grid to the initial empty grid\n    setFlagCount(config.mines); // Initialize flag count based on mines\n  }\n\n  // Place mines on the grid, avoiding the first click position\n  function placeMinesAvoidingFirstClick(grid, firstRow, firstCol) {\n    let minesPlaced = 0;\n    while (minesPlaced < config.mines) {\n      const row = Math.floor(Math.random() * config.size);\n      const col = Math.floor(Math.random() * config.size);\n\n      if ((row !== firstRow || col !== firstCol) && !grid[row][col].isMine) {\n        grid[row][col] = { ...grid[row][col], isMine: true };\n        updateAdjacentCounts(grid, row, col);\n        minesPlaced++;\n      }\n    }\n  }\n\n  // Update the adjacent mine count for cells surrounding a new mine\n  function updateAdjacentCounts(grid, row, col) {\n    for (let r = Math.max(row - 1, 0); r <= Math.min(row + 1, config.size - 1); r++) {\n      for (let c = Math.max(col - 1, 0); c <= Math.min(col + 1, config.size - 1); c++) {\n        if (!grid[r][c].isMine) {\n          grid[r][c].adjacentMines++;\n        }\n      }\n    }\n  }\n\n  // Handle left-click on a cell, with Safe First Turn logic\n  function handleClick(row, col) {\n    if (isGameOver || grid[row][col].isRevealed) return;\n\n    const newGrid = [...grid];\n\n    // Place mines on first click, avoiding the clicked cell\n    if (isFirstClick) {\n      placeMinesAvoidingFirstClick(newGrid, row, col);\n      setIsFirstClick(false);\n    }\n\n    // Check if the cell is a mine\n    if (newGrid[row][col].isMine) {\n      setIsGameOver(true);\n      alert(\"Game over! You hit a bomb!\");\n      revealAllMines(newGrid);\n      setGrid(newGrid);\n      return;\n    }\n\n    // Reveal the cell and adjacent cells if no adjacent mines\n    revealCell(newGrid, row, col);\n    setGrid(newGrid);\n\n    // Check if the player has won\n    if (checkWin(newGrid)) {\n      setHasWon(true);\n      alert(\"Congratulations! You won!\");\n    }\n  }\n\n  // Right-click or shift-click to toggle a flag, implementing the Flag Bomb Function\n  function handleRightClick(event, row, col) {\n    event.preventDefault();\n    if (isGameOver || grid[row][col].isRevealed) return;\n\n    const newGrid = [...grid];\n    newGrid[row][col].isFlagged = !newGrid[row][col].isFlagged;\n    setFlagCount(flagCount + (newGrid[row][col].isFlagged ? -1 : 1));\n    setGrid(newGrid);\n  }\n\n  // Reveal a cell and, if no adjacent mines, implement Auto Clear by recursively revealing cells\n  function revealCell(grid, row, col) {\n    if (row < 0 || col < 0 || row >= config.size || col >= config.size || grid[row][col].isRevealed || grid[row][col].isMine) return;\n\n    grid[row][col].isRevealed = true;\n\n    if (grid[row][col].adjacentMines === 0) {\n      getNeighbors(row, col).forEach(([r, c]) => revealCell(grid, r, c));\n    }\n  }\n\n  // Get all valid neighboring cells for a given cell\n  function getNeighbors(row, col) {\n    const directions = [\n      [-1, -1], [-1, 0], [-1, 1],\n      [0, -1],           [0, 1],\n      [1, -1], [1, 0], [1, 1]\n    ];\n    return directions\n      .map(([dr, dc]) => [row + dr, col + dc])\n      .filter(([r, c]) => r >= 0 && r < config.size && c >= 0 && c < config.size);\n  }\n\n  // Show all mines if the game is over\n  function revealAllMines(grid) {\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell.isMine) {\n          cell.isRevealed = true;\n        }\n      });\n    });\n  }\n\n  // Check if the player has won by revealing all non-mine cells\n  function checkWin(grid) {\n    return grid.flat().every(cell => cell.isMine || cell.isRevealed);\n  }\n\n  // Reset the game state and initialize a new grid\n  function resetGame() {\n    setIsGameOver(false);\n    setHasWon(false);\n    setIsFirstClick(true);\n    initializeGrid(); // This will set up an empty grid initially\n  }\n\n  // Render the Minesweeper game\n  return (\n    <div>\n      <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper\"}</h1>\n      <h2>Flags remaining: {flagCount}</h2>\n      <button onClick={resetGame}>Reset</button>\n      <div className=\"board\" style={{ gridTemplateColumns: `repeat(${config.size}, 1fr)` }}>\n        {grid.map((row, rIndex) =>\n          row.map((cell, cIndex) => (\n            <Cell\n              key={`${rIndex}-${cIndex}`}\n              isRevealed={cell.isRevealed}\n              isMine={cell.isMine}\n              adjacentMines={cell.adjacentMines}\n              isFlagged={cell.isFlagged}\n              onClick={() => handleClick(rIndex, cIndex)}\n              onContextMenu={(e) => handleRightClick(e, rIndex, cIndex)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n"
        }
    ]
}