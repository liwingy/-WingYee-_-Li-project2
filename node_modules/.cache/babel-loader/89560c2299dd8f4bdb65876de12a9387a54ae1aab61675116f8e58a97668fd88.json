{"ast":null,"code":"var _jsxFileName = \"/Users/wingli/Desktop/5610/cs5610_fall24_project2/src/views/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Cell from '../components/Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const {\n    difficulty\n  } = useParams();\n\n  // Define game states and configurations\n  const [grid, setGrid] = useState([]);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [hasWon, setHasWon] = useState(false);\n  const [isFirstClick, setIsFirstClick] = useState(true);\n  const [flagCount, setFlagCount] = useState(0);\n\n  // Configuration for different difficulties\n  const config = {\n    easy: {\n      size: 8,\n      mines: 10\n    },\n    medium: {\n      size: 16,\n      mines: 40\n    },\n    hard: {\n      size: 30,\n      mines: 99\n    }\n  }[difficulty] || {\n    size: 8,\n    mines: 10\n  };\n\n  // Reset the game when the component mounts or the difficulty changes\n  useEffect(() => {\n    resetGame(); // Initialize game state\n  }, [difficulty]);\n\n  // Initialize a new grid and set up mines\n  function initializeGrid() {\n    const emptyGrid = Array.from({\n      length: config.size\n    }, () => Array.from({\n      length: config.size\n    }, () => ({\n      isRevealed: false,\n      isMine: false,\n      isFlagged: false,\n      adjacentMines: 0\n    })));\n    setGrid(emptyGrid); // Set grid to the initial empty grid\n    setFlagCount(config.mines); // Initialize flag count based on mines\n  }\n\n  // Place mines on the grid, avoiding the first click position\n  function placeMinesAvoidingFirstClick(grid, firstRow, firstCol) {\n    let minesPlaced = 0;\n    while (minesPlaced < config.mines) {\n      const row = Math.floor(Math.random() * config.size);\n      const col = Math.floor(Math.random() * config.size);\n      if ((row !== firstRow || col !== firstCol) && !grid[row][col].isMine) {\n        grid[row][col] = {\n          ...grid[row][col],\n          isMine: true\n        };\n        updateAdjacentCounts(grid, row, col);\n        minesPlaced++;\n      }\n    }\n  }\n\n  // Update the adjacent mine count for cells surrounding a new mine\n  function updateAdjacentCounts(grid, row, col) {\n    for (let r = Math.max(row - 1, 0); r <= Math.min(row + 1, config.size - 1); r++) {\n      for (let c = Math.max(col - 1, 0); c <= Math.min(col + 1, config.size - 1); c++) {\n        if (!grid[r][c].isMine) {\n          grid[r][c].adjacentMines++;\n        }\n      }\n    }\n  }\n\n  // Handle left-click on a cell, with Safe First Turn logic\n  function handleClick(row, col) {\n    if (isGameOver || grid[row][col].isRevealed) return;\n    const newGrid = [...grid];\n\n    // Place mines on first click, avoiding the clicked cell\n    if (isFirstClick) {\n      placeMinesAvoidingFirstClick(newGrid, row, col);\n      setIsFirstClick(false);\n    }\n\n    // Check if the cell is a mine\n    if (newGrid[row][col].isMine) {\n      setIsGameOver(true);\n      alert(\"Game over🙈! You hit a bomb💣!\");\n      revealAllMines(newGrid);\n      setGrid(newGrid);\n      return;\n    }\n\n    // Reveal the cell and adjacent cells if no adjacent mines\n    revealCell(newGrid, row, col);\n    setGrid(newGrid);\n\n    // Check if the player has won\n    if (checkWin(newGrid)) {\n      setHasWon(true);\n      alert(\"Congratulations🥳! You won🏅!\");\n    }\n  }\n\n  // Right-click or shift-click to toggle a flag, implementing the Flag Bomb Function\n  function handleRightClick(event, row, col) {\n    event.preventDefault();\n    if (isGameOver || grid[row][col].isRevealed) return;\n    const newGrid = [...grid];\n    newGrid[row][col].isFlagged = !newGrid[row][col].isFlagged;\n    setFlagCount(flagCount + (newGrid[row][col].isFlagged ? -1 : 1));\n    setGrid(newGrid);\n  }\n\n  // Reveal a cell and, if no adjacent mines, implement Auto Clear by recursively revealing cells\n  function revealCell(grid, row, col) {\n    if (row < 0 || col < 0 || row >= config.size || col >= config.size || grid[row][col].isRevealed || grid[row][col].isMine) return;\n    grid[row][col].isRevealed = true;\n    if (grid[row][col].adjacentMines === 0) {\n      getNeighbors(row, col).forEach(([r, c]) => revealCell(grid, r, c));\n    }\n  }\n\n  // Get all valid neighboring cells for a given cell\n  function getNeighbors(row, col) {\n    const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    return directions.map(([dr, dc]) => [row + dr, col + dc]).filter(([r, c]) => r >= 0 && r < config.size && c >= 0 && c < config.size);\n  }\n\n  // Show all mines if the game is over\n  function revealAllMines(grid) {\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell.isMine) {\n          cell.isRevealed = true;\n        }\n      });\n    });\n  }\n\n  // Check if the player has won by revealing all non-mine cells\n  function checkWin(grid) {\n    return grid.flat().every(cell => cell.isMine || cell.isRevealed);\n  }\n\n  // Reset the game state and initialize a new grid\n  function resetGame() {\n    setIsGameOver(false);\n    setHasWon(false);\n    setIsFirstClick(true);\n    initializeGrid(); // This will set up an empty grid initially\n  }\n\n  // Render the Minesweeper game\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Flags remaining: \", flagCount, \" \\uD83D\\uDEA9\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetGame,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      style: {\n        gridTemplateColumns: `repeat(${config.size}, 1fr)`\n      },\n      children: grid.map((row, rIndex) => row.map((cell, cIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n        isRevealed: cell.isRevealed,\n        isMine: cell.isMine,\n        adjacentMines: cell.adjacentMines,\n        isFlagged: cell.isFlagged,\n        onClick: () => handleClick(rIndex, cIndex),\n        onContextMenu: e => handleRightClick(e, rIndex, cIndex)\n      }, `${rIndex}-${cIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"ABMS2p8ZXvOfuK1dy0RXQgyBXAo=\", false, function () {\n  return [useParams];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Cell","jsxDEV","_jsxDEV","Game","_s","difficulty","grid","setGrid","isGameOver","setIsGameOver","hasWon","setHasWon","isFirstClick","setIsFirstClick","flagCount","setFlagCount","config","easy","size","mines","medium","hard","resetGame","initializeGrid","emptyGrid","Array","from","length","isRevealed","isMine","isFlagged","adjacentMines","placeMinesAvoidingFirstClick","firstRow","firstCol","minesPlaced","row","Math","floor","random","col","updateAdjacentCounts","r","max","min","c","handleClick","newGrid","alert","revealAllMines","revealCell","checkWin","handleRightClick","event","preventDefault","getNeighbors","forEach","directions","map","dr","dc","filter","cell","flat","every","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","style","gridTemplateColumns","rIndex","cIndex","onContextMenu","e","_c","$RefreshReg$"],"sources":["/Users/wingli/Desktop/5610/cs5610_fall24_project2/src/views/Game.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Cell from '../components/Cell';\n\nfunction Game() {\n  const { difficulty } = useParams();\n\n  // Define game states and configurations\n  const [grid, setGrid] = useState([]);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [hasWon, setHasWon] = useState(false);\n  const [isFirstClick, setIsFirstClick] = useState(true);\n  const [flagCount, setFlagCount] = useState(0);\n\n  // Configuration for different difficulties\n  const config = {\n    easy: { size: 8, mines: 10 },\n    medium: { size: 16, mines: 40 },\n    hard: { size: 30, mines: 99 },\n  }[difficulty] || { size: 8, mines: 10 };\n\n  // Reset the game when the component mounts or the difficulty changes\n  useEffect(() => {\n    resetGame(); // Initialize game state\n  }, [difficulty]);\n\n  // Initialize a new grid and set up mines\n  function initializeGrid() {\n    const emptyGrid = Array.from({ length: config.size }, () =>\n      Array.from({ length: config.size }, () => ({\n        isRevealed: false,\n        isMine: false,\n        isFlagged: false,\n        adjacentMines: 0,\n      }))\n    );\n    setGrid(emptyGrid); // Set grid to the initial empty grid\n    setFlagCount(config.mines); // Initialize flag count based on mines\n  }\n\n  // Place mines on the grid, avoiding the first click position\n  function placeMinesAvoidingFirstClick(grid, firstRow, firstCol) {\n    let minesPlaced = 0;\n    while (minesPlaced < config.mines) {\n      const row = Math.floor(Math.random() * config.size);\n      const col = Math.floor(Math.random() * config.size);\n\n      if ((row !== firstRow || col !== firstCol) && !grid[row][col].isMine) {\n        grid[row][col] = { ...grid[row][col], isMine: true };\n        updateAdjacentCounts(grid, row, col);\n        minesPlaced++;\n      }\n    }\n  }\n\n  // Update the adjacent mine count for cells surrounding a new mine\n  function updateAdjacentCounts(grid, row, col) {\n    for (let r = Math.max(row - 1, 0); r <= Math.min(row + 1, config.size - 1); r++) {\n      for (let c = Math.max(col - 1, 0); c <= Math.min(col + 1, config.size - 1); c++) {\n        if (!grid[r][c].isMine) {\n          grid[r][c].adjacentMines++;\n        }\n      }\n    }\n  }\n\n  // Handle left-click on a cell, with Safe First Turn logic\n  function handleClick(row, col) {\n    if (isGameOver || grid[row][col].isRevealed) return;\n\n    const newGrid = [...grid];\n\n    // Place mines on first click, avoiding the clicked cell\n    if (isFirstClick) {\n      placeMinesAvoidingFirstClick(newGrid, row, col);\n      setIsFirstClick(false);\n    }\n\n    // Check if the cell is a mine\n    if (newGrid[row][col].isMine) {\n      setIsGameOver(true);\n      alert(\"Game over🙈! You hit a bomb💣!\");\n      revealAllMines(newGrid);\n      setGrid(newGrid);\n      return;\n    }\n\n    // Reveal the cell and adjacent cells if no adjacent mines\n    revealCell(newGrid, row, col);\n    setGrid(newGrid);\n\n    // Check if the player has won\n    if (checkWin(newGrid)) {\n      setHasWon(true);\n      alert(\"Congratulations🥳! You won🏅!\");\n    }\n  }\n\n  // Right-click or shift-click to toggle a flag, implementing the Flag Bomb Function\n  function handleRightClick(event, row, col) {\n    event.preventDefault();\n    if (isGameOver || grid[row][col].isRevealed) return;\n\n    const newGrid = [...grid];\n    newGrid[row][col].isFlagged = !newGrid[row][col].isFlagged;\n    setFlagCount(flagCount + (newGrid[row][col].isFlagged ? -1 : 1));\n    setGrid(newGrid);\n  }\n\n  // Reveal a cell and, if no adjacent mines, implement Auto Clear by recursively revealing cells\n  function revealCell(grid, row, col) {\n    if (row < 0 || col < 0 || row >= config.size || col >= config.size || grid[row][col].isRevealed || grid[row][col].isMine) return;\n\n    grid[row][col].isRevealed = true;\n\n    if (grid[row][col].adjacentMines === 0) {\n      getNeighbors(row, col).forEach(([r, c]) => revealCell(grid, r, c));\n    }\n  }\n\n  // Get all valid neighboring cells for a given cell\n  function getNeighbors(row, col) {\n    const directions = [\n      [-1, -1], [-1, 0], [-1, 1],\n      [0, -1],           [0, 1],\n      [1, -1], [1, 0], [1, 1]\n    ];\n    return directions\n      .map(([dr, dc]) => [row + dr, col + dc])\n      .filter(([r, c]) => r >= 0 && r < config.size && c >= 0 && c < config.size);\n  }\n\n  // Show all mines if the game is over\n  function revealAllMines(grid) {\n    grid.forEach(row => {\n      row.forEach(cell => {\n        if (cell.isMine) {\n          cell.isRevealed = true;\n        }\n      });\n    });\n  }\n\n  // Check if the player has won by revealing all non-mine cells\n  function checkWin(grid) {\n    return grid.flat().every(cell => cell.isMine || cell.isRevealed);\n  }\n\n  // Reset the game state and initialize a new grid\n  function resetGame() {\n    setIsGameOver(false);\n    setHasWon(false);\n    setIsFirstClick(true);\n    initializeGrid(); // This will set up an empty grid initially\n  }\n\n  // Render the Minesweeper game\n  return (\n    <div>\n      <h1>{isGameOver ? \"Game Over\" : hasWon ? \"You Won!\" : \"Minesweeper\"}</h1>\n      <h2>Flags remaining: {flagCount} 🚩</h2>\n      <button onClick={resetGame}>Reset</button>\n      <div className=\"board\" style={{ gridTemplateColumns: `repeat(${config.size}, 1fr)` }}>\n        {grid.map((row, rIndex) =>\n          row.map((cell, cIndex) => (\n            <Cell\n              key={`${rIndex}-${cIndex}`}\n              isRevealed={cell.isRevealed}\n              isMine={cell.isMine}\n              adjacentMines={cell.adjacentMines}\n              isFlagged={cell.isFlagged}\n              onClick={() => handleClick(rIndex, cIndex)}\n              onContextMenu={(e) => handleRightClick(e, rIndex, cIndex)}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}